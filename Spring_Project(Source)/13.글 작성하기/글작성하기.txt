글 작성하기

1. Spring MVC는 CommonsMultipartResolver와 CosMultipartResolver 두 가지를 사용하였으나 
    Servlet 버전 3.1 부터는 StandardServletMultipartResolver 를 사용

파라미터 전달 세팅
-BoardController.java
	//게시글 index번호 가져오기
	@GetMapping("/main")
	public String main(@RequestParam("board_info_idx") int board_info_idx, Model model) {

		model.addAttribute("board_info_idx", board_info_idx);

		return "board/main";
	}

-board/main.jsp
<a href="${root }board/write?board_info_idx=${board_info_idx}" class="btn btn-primary">글쓰기</a>
컴파일시 글쓰기 됨
=======================================================================
2.글 쓰기
-board/write.jsp
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
...
<div class="card-body">
	<form:form action='${root }board/write_pro' method='post' modelAttribute="writeContentBean">
		<div class="form-group">
			<form:label path="content_subject">제목</form:label>
			<form:input path="content_subject" class='form-control'/>
			<form:errors path='content_subject' style='color:red' />
		</div>
		<div class="form-group">
			<form:label path="content_text">내용</form:label>
			<form:textarea path="content_text" class="form-control" rows="10" style="resize:none"/>
			<form:errors path='content_text' style='color:red'/>
		</div>
		<div class="form-group">
			<form:label path="content_file">첨부 이미지</form:label>
			<form:input type='file' path='content_file' class="form-control" accept="image/*"/>
		</div>
		<div class="form-group">
			<div class="text-right">
				<form:button class='btn btn-primary'>작성하기</form:button>
			</div>
		</div>
	
	</form:form>

-BoardController.java
	@GetMapping("/write")
	public String write(@ModelAttribute("writeContentBean") ContentBean writeContentBean) {
		return "board/write";
	}

-ContentBean.java (유효성 등록)	
import javax.validation.constraints.NotBlank;

public class ContentBean {

	private int content_idx;
	
	//NOTNULL 과 같음
	@NotBlank
	private String content_subject;
	
	@NotBlank
	private String content_text;
	...
}

-error_message.properties
NotBlank.writeContentBean.content_subject = 제목을 입력해주세요
NotBlank.writeContentBean.content_text = 내용을 입력해주세요

-BoardController.java
	@PostMapping("/write_pro")
	public String write_pro(@Valid @ModelAttribute("writeContentBean") ContentBean writeContentBean, BindingResult result) {
		if(result.hasErrors()) {
			return "board/write";
		}
		
		return "board/write_success";
	}

컴파일 글작성 입력시 404
=================================================================
XML
복 붙
-main.js
<a href="${root }board/write?board_info_idx=${board_info_idx}" class="btn btn-primary">글쓰기</a>

-BoardController.java
-ContentBean.java
-error_message.properties
-board/write.jsp

=================================================
3글쓰기2(데이터와 첨부파일 서버에 전달)
-board/write.jsp
enctype="multipart/form-data" 추가 ContentBean.java으로 전달되어야 하지만
 write.jsp의 <form:form action='${root }board/write_pro' method='post' modelAttribute="writeContentBean" enctype="multipart/form-data">
컴파일시 올바른 입력도 유효성에 걸림
----------------------------------------------------------------------------
enctype="multipart/form-data"에서 정보를 받으면 일반적인 방법이 아니므로 contentBean의 
	@NotBlank
	private String content_subject;
	
	@NotBlank
	private String content_text;
에서 받지못함 그러므로 StandardServletMultipartResolver타입의 Bean을 정의 
-ServletAppContext.java
	@Bean
	public StandardServletMultipartResolver multipartResolver() {
		return new StandardServletMultipartResolver(); //객체 생성하여 반환
	}

-SpringConfigClass.java
맨아래 추가
	//null: 사용자가 입력한 내용을 임시기억할 아파치톰켁에서 제공하는 서버의 임시기억장소
	//52428800 :  업로드 데이터의 용량 (1024*50) 50M로 설정
	//524288000 : 파일데이터를 포함한 전체용량 500M 설정
	//0 : 파일의 임계값

            //Multipart 정보구현
	@Override
	protected void customizeRegistration(Dynamic registration) {
		// TODO Auto-generated method stub
		super.customizeRegistration(registration);
		
		MultipartConfigElement config1 = new MultipartConfigElement(null, 52428800, 524288000, 0);
		registration.setMultipartConfig(config1);
	}


write.jsp 에서 첨부파일을 <form:label path="content_file">첨부 이미지</form:label>정의함
그런데 ContentBean.java에 content_file은 String타입이므로 주입 받을수 없음
때문에 파일을 주입받을 속성 추가
-ContentBean.java
private MultipartFile upload_file; //브라우저가 보낸 파일 데이터 
(getter and setter)
	private String content_file;//데이터 베이스의 파일이름를 담을 변수
	private int content_writer_idx;
	private int content_board_idx;
	private String content_date;


-write.jsp
<div class="form-group">
		<form:label path="upload_file">첨부 이미지</form:label>
		<form:input type='file' path='upload_file' class="form-control" accept="image/*"/>
</div>
=========================================================
-BoardService.java 생성
//ContentBean에 전달된 내용 출력
@Service
public class BoardService {
	public void addContentInfo(ContentBean writeContentBean) {
		
		System.out.println(writeContentBean.getContent_subject());
		System.out.println(writeContentBean.getContent_text());
		System.out.println(writeContentBean.getUpload_file().getSize());
	}

-BoardController.java
	@Autowired
	private BoardService boardService;
	...
	@PostMapping("/write_pro")
	public String write_pro(@Valid @ModelAttribute("writeContentBean") ContentBean writeContentBean, BindingResult result) {
		if(result.hasErrors()) {
			return "board/write";
		}
		
		*** boardService.addContentInfo(writeContentBean); ***
		
		return "board/write_success";
	}

컴파일시 콘솔에 데이터와 첨부 파일 용량 출력됨
===========================================================
4.저장하기
-resources/upload폴더 생성
파일저장시 절대 경로가 필요함
-HomeController.java(물리적 경로 확인)
@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(*** HttpServletRequest request ***) {
//		System.out.println(loginUserBean);
		
		*** System.out.println(request.getServletContext().getRealPath("/")); ***
		
		return "redirect:/main";
	}

컴파일시 콘솔에 경로 확인됨(확인후 주석처리)
//System.out.println(request.getServletContext().getRealPath("/"))
===============================================================
-properties/ option.properties파일 생성
path.upload = D:/Spring Project/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/MiniprojectJava/resources/upload

-BoardService.java
@Service
@PropertySource("/WEB-INF/properties/option.properties")
public class BoardService {
	
	@Value("${path.upload}")
	private String path_upload;


	private String saveUploadFile(MultipartFile upload_file) {
		//현재시간과 오리지널 파일네임
		String file_name = System.currentTimeMillis() + "_" + upload_file.getOriginalFilename();
		
		try {//경로와 파일네임
			upload_file.transferTo(new File(path_upload + "/" + file_name));
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		return file_name;
	}
	

	
	public void addContentInfo(ContentBean writeContentBean) {
		
		MultipartFile upload_file = writeContentBean.getUpload_file();
	
	
			if(upload_file.getSize() > 0) {
			String file_name = saveUploadFile(upload_file);
			System.out.println(file_name);
			}
     		}
	}
탐색기에 파일경로열어놓고 컴파일
=======================================================
4.DB에 저장하기
-BoardController.java
	@GetMapping("/write")
	public String write(@ModelAttribute("writeContentBean") ContentBean writeContentBean,
						@RequestParam("board_info_idx") int board_info_idx) {
		
		writeContentBean.setContent_board_idx(board_info_idx);
		
		return "board/write";
	}

-board/write.jsp
<form:form action='${root }board/write_pro' method='post' modelAttribute="writeContentBean" enctype="multipart/form-data">
	<form:hidden path="content_board_idx"/>

-BoardMapper.java
public interface BoardMapper {
	
	//jdbcType=VARCHAR :NULL값처리
	//jdbcType=VARCHAR:MyBatis에서 null값을 문자로 인지하도록한다
	@Insert("insert into content_table(content_idx, content_subject, content_text, " +
			"content_file, content_writer_idx, content_board_idx, content_date) " +
			"values (content_seq.nextval, #{content_subject}, #{content_text}, #{content_file, jdbcType=VARCHAR}, " +
			"#{content_writer_idx}, #{content_board_idx}, sysdate)")
	void addContentInfo(ContentBean writeContentBean);


}

-BoardDao.java
@Repository
public class BoardDao {
	
	@Autowired
	private BoardMapper boardMapper;
	
	public void addContentInfo(ContentBean writeContentBean) {
		boardMapper.addContentInfo(writeContentBean);
	}
}


-BoardService.java
@Service
@PropertySource("/WEB-INF/properties/option.properties")
public class BoardService {
	
	@Value("${path.upload}")
	private String path_upload;
	
	@Autowired
	private BoardDao boardDao;
	
	
	@Resource(name = "loginUserBean")
	private UserBean loginUserBean;
	
	//저장하는 메소드
	private String saveUploadFile(MultipartFile upload_file) {
		
		//String file_name = System.currentTimeMillis() + "_" + upload_file.getOriginalFilename();
		
		//경로 시스템오류시 메이븐에서 commons-io라이브러리 (https://mvnrepository.com/artifact/commons-io/commons-io/2.6) <-pom.xml에 추가
		String file_name = System.currentTimeMillis() + "_" +  
		FilenameUtils.getBaseName(upload_file.getOriginalFilename()) + "." + 
				FilenameUtils.getExtension(upload_file.getOriginalFilename());

		
		try {
			upload_file.transferTo(new File(path_upload + "/" + file_name));
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		return file_name;
	}
	
	public void addContentInfo(ContentBean writeContentBean) {
		
		System.out.println(writeContentBean.getContent_subject());
		System.out.println(writeContentBean.getContent_text());
		System.out.println(writeContentBean.getUpload_file().getSize());
		
		
		MultipartFile upload_file = writeContentBean.getUpload_file();
		
		
		if(upload_file.getSize() > 0) {
			String file_name = saveUploadFile(upload_file);
			//System.out.println(file_name);
			//첨부파일 호출
			writeContentBean.setContent_file(file_name);
		}
		
		writeContentBean.setContent_writer_idx(loginUserBean.getUser_idx());
		
		boardDao.addContentInfo(writeContentBean);
	}
}

-write_success.jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var='root' value='${pageContext.request.contextPath }/'/>
<script>
	alert('저장되었습니다')
	location.href = '${root}board/read'
</script>
==============================================================